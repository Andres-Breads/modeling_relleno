# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from minizinc import Instance, Model, Solver
import time

class Ui_Dialog(object):
    def __init__(self, parent=None):
        self.mzn_model = Model('./solver_relleno_sanitario.mzn')
        self.solver = Solver.lookup("gecode")
    
    def setupScene(self):
        self.scene = QtWidgets.QGraphicsScene()
        self.pen = QtGui.QPen(QtCore.Qt.gray)
        self.redPen = QtGui.QPen(QtCore.Qt.red)
        self.greenBrush = QtGui.QBrush(QtCore.Qt.green)
        self.redBrush = QtGui.QBrush(QtCore.Qt.red)
        self.graphicsView.setScene(self.scene)
        self.scale = 20 # scale of pixels to draw everything
        self.padding_y = 20 # space to move y pixels
        
    def drawPlane(self):
        self.scene.clear()
        region = self.mzn_instance._data["n"]
        n_ciudades = self.mzn_instance._data["m"]
        ciudades = self.mzn_instance._data["ciudades"]
        self.max_x = region*self.scale
        self.max_y = region*self.scale

        # draw vertical lines
        for item in range(region+1):
            self.scene.addLine(item*self.scale, self.padding_y, item*self.scale, self.max_y+self.padding_y, self.pen)
        # draw horizontal lines
        for item in range(region+1):
            self.scene.addLine(0, item*self.scale+self.padding_y, self.max_x, item*self.scale+self.padding_y, self.pen)
        # draw cities
        for item in range(n_ciudades):
            ciudad_x = ciudades[item][0] * self.scale - 5
            ciudad_y = self.max_y - ciudades[item][1] * self.scale + self.padding_y - 5
            self.scene.addEllipse(QtCore.QRectF(ciudad_x, ciudad_y, 10, 10), self.pen, self.greenBrush)

    def drawSolution(self):
        self.relleno_x = self.result["relleno_x"]
        self.relleno_y = self.result["relleno_y"]
        self.distancia = self.result["distancia"]
        self.ciudad_cercana_x = self.result["ciudad_cercana_x"]
        self.ciudad_cercana_y = self.result["ciudad_cercana_y"]

        result_text = f"Coordenadas del relleno sanitario: {{{self.relleno_x}, {self.relleno_y}}}\n"
        result_text += f"Distancia: {self.distancia}\n"
        result_text += f"Ciudad m치s cercana: {{{self.ciudad_cercana_x}, {self.ciudad_cercana_y}}}\n"
        self.labelResult.setText(result_text)

        # draw landfill
        relleno_x = self.relleno_x * self.scale - 5
        relleno_y = self.max_y - self.relleno_y * self.scale + self.padding_y - 5
        self.scene.addEllipse(QtCore.QRectF(relleno_x, relleno_y, 10, 10), self.pen, self.redBrush)
        # draw closest city
        ciudad_cercana_x = self.ciudad_cercana_x * self.scale - 7
        ciudad_cercana_y = self.max_y - self.ciudad_cercana_y * self.scale + self.padding_y - 7
        self.scene.addEllipse(QtCore.QRectF(ciudad_cercana_x, ciudad_cercana_y, 14, 14), self.redPen)
        # draw Manhattan distance
        self.scene.addLine(relleno_x+5, relleno_y+5, relleno_x+5, ciudad_cercana_y+7, self.redPen)
        self.scene.addLine(relleno_x+5, ciudad_cercana_y+7, ciudad_cercana_x+7, ciudad_cercana_y+7, self.redPen)

    def buttonFileClicked(self):
        options = QtWidgets.QFileDialog.Options()
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()", "","Dzn Files (*.dzn)", options=options)
        if filename:
            self.mzn_instance = Instance(self.solver, self.mzn_model)
            self.mzn_instance.add_file(filename, True)
            self.labelFile.setText(filename)
            self.drawPlane()

    def selectSolver(self):
        self.solver = Solver.lookup(self.comboBox.itemText(self.comboBox.currentIndex()))

    def buttonSolverClicked(self):
        self.labelData.setText('Resolviendo el modelo...')
        start_time = time.time()
        self.result = self.mzn_instance.solve()
        duration = time.time() - start_time
        if (self.result):
            self.labelData.setText(f"Modelo Resuleto! Duraci칩n: {duration} segundos")
            self.drawSolution()
        else:
            self.labelData.setText(f"No hay soluci칩n para el modelo. Tiempo de ejecuci칩n: {duration}")

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(640, 480)
        self.labelMessage = QtWidgets.QLabel(Dialog)
        self.labelMessage.setGeometry(QtCore.QRect(20, 0, 440, 16))
        self.labelMessage.setObjectName("labelMessage")
        self.pushButtonFile = QtWidgets.QPushButton(Dialog)
        self.pushButtonFile.setGeometry(QtCore.QRect(20, 20, 130, 25))
        self.pushButtonFile.setObjectName("pushButtonFile")
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setGeometry(QtCore.QRect(190, 20, 120, 25))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("gecode")
        self.comboBox.addItem("chuffed")
        self.comboBox.addItem("coin-bc")
        # self.comboBox.addItem("findmus")
        # self.comboBox.addItem("globalizer")
        self.pushButtonSolver = QtWidgets.QPushButton(Dialog)
        self.pushButtonSolver.setGeometry(QtCore.QRect(330, 20, 75, 25))
        self.pushButtonSolver.setObjectName("pushButtonSolver")
        self.labelFile = QtWidgets.QLabel(Dialog)
        self.labelFile.setGeometry(QtCore.QRect(20, 50, 440, 16))
        self.labelFile.setObjectName("labelFile")
        self.labelData = QtWidgets.QLabel(Dialog)
        self.labelData.setGeometry(QtCore.QRect(20, 70, 320, 16))
        self.labelData.setObjectName("labelData")
        self.labelResult = QtWidgets.QLabel(Dialog)
        self.labelResult.setGeometry(QtCore.QRect(20, 100, 350, 60))
        self.labelResult.setObjectName("labelResult")
        self.graphicsView = QtWidgets.QGraphicsView(Dialog)
        self.graphicsView.setGeometry(QtCore.QRect(20, 170, 600, 290))
        self.graphicsView.setObjectName("graphicsView")

        self.retranslateUi(Dialog)
        self.pushButtonFile.clicked.connect(self.buttonFileClicked)
        self.comboBox.currentIndexChanged.connect(self.selectSolver)
        self.pushButtonSolver.clicked.connect(self.buttonSolverClicked)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.setupScene()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Relleno Sanitario"))
        self.pushButtonFile.setText(_translate("Dialog", "Seleccionar archivo dzn"))
        self.pushButtonSolver.setText(_translate("Dialog", "Resolver"))
        self.labelMessage.setText(_translate("Dialog", "Seleccione un archivo de datos para empezar. El solver por defecto es Gecode"))
        self.labelData.setText(_translate("Dialog", "Esperando datos..."))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())